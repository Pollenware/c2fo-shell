var MCat  = require( 'message-catalog/ocap/invoice' ).MCat;

exports.Invoice = Invoice;

function Invoice( net, finishHandler ) {

  var self = this;

  self.__finishHandler = finishHandler;

  self.get = function ( connectionId, connection, query ) {
    var invoiceCallback = function ( connectionId, error ) {
      var cId = connectionId.split( '@' );
      if ( error ) {
        console.log( cId[1] + ' - ' + MCat.errorInvoice );
        self.__finishHandler( connectionId, error );
        return;
      }
      else {
        console.log( cId[1] + ' - ' + MCat.successInvoice );
        self.__finishHandler( connectionId );
      }
    };
    var userType;
    if ( connection ) { 
      if ( connection.user_type == MCat.BUYER ) {
        userType = 'buyer';
      }
      else if ( connection.user_type = MCat.SUPPLIER ) {
        userType = 'supplier';
      }
    }
    else {
      console.warn( MCat.errorPrefix + ' - ' + MCat.errorNoConnection );
    }

    var cId      = connectionId.split( '@' );
    var instance = cId[1];
    if ( !connection || !( connection.sessionCookie ) ) {
      self.__finishHandler( connectionId );
      return;
    }

    if ( !query ) {
      query = 'sortOn=amount';
    }

    console.log( MCat.invoiceRetriMsg );

    self.net.get( 'invoices/' + userType + '/' + connection.org_id + self.__marshalQuery( connection, query ),
      function ( error ) {
        if ( !error )
          error = MCat.networkError;
        connection.lastAction = MCat.failedSignInMsg;
        console.error( MCat.errorPrefix + ' ' + error );
        self.__finishHandler( connectionId, error );
      },
      function ( response ) {
        connection.lastAction = MCat.eventsDetailAction;
        console.log( instance   + ' - ' + MCat.eventsDetailMsg );
        var payload           = JSON.parse( response.body ).payload;
        connection.lastActive = new Date( payload.created );
        var invoices            = payload.response.invoices; 
        var invoiceCount        = invoices.length;
        console.log( instance + ' - ' + MCat.invoiceCountMsg + invoiceCount );
        for ( i in invoices ) {
          var thisInvoice = invoices[i];
          var invoiceId   = thisInvoice.pollenware_invoice_id;
          connection.invoices_local = connection.invoices_local || {};
          connection.invoices_local[invoiceId] = {};
          for (key in thisInvoice) {
            connection.invoices_local[invoiceId][key] = thisInvoice[key];
          }
        }
        self.__finishHandler( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

  self.isDebugging = false;

  self.net = net;

  self.toggle = function ( connectionId, connection, keep, exclude ) {

    var toggleCallback = function ( connectionId, error ) {
      var cId = connectionId.split('@');
      if ( error ) {
        console.log( cId[1] + ' - ' + MCat.errorToggle );
        self.callback( connectionId );
        return;
      }
      else {
        console.log( cId[1] + ' - ' + MCat.successToggle );
        self.callback( connectionId );
      }
    };

    var cId      = connectionId.split( '@' );
    var instance = cId[1].trim();

    var payload                 = {};
    payload.details             = ["invoices"];
    payload.include_invoice_ids = {};
    payload.exclude_invoice_ids = {};

    var userType = '';
    if ( connection.user_type == MCat.BUYER ) {

      //
      // buyers must specify a supplier id with each invoice id
      //
      userType = 'buyer';
      for (var tuple in keep) {
        if ( /\|/.test( keep[tuple] ) ) {
          var bySupplier = keep[tuple].split('|');
          var supplierId = bySupplier[0];
          payload.include_invoice_ids[supplierId] = payload.include_invoice_ids[supplierId] || [];
          payload.include_invoice_ids[supplierId].push( bySupplier[1] );
        }
        else {
          console.log( MCat.errorAmbiguous + ': ' + keep[tuple] );
        }
      } 
      for (var tuple in exclude) {
        if ( /\|/.test( exclude[tuple] ) ) {
          var bySupplier = exclude[tuple].split('|');
          var supplierId = bySupplier[0];
          payload.exclude_invoice_ids[supplierId] = payload.exclude_invoice_ids[supplierId] || [];
          payload.exclude_invoice_ids[supplierId].push( bySupplier[1] );
        }
        else {
          console.log( MCat.errorAmbiguous + ': ' + exclude[tuple] );
        }
      } 
    }
    else if ( connection.user_type == MCat.SUPPLIER ) {
      userType = 'supplier'; 
      payload.include_invoice_ids[connection.org_id] = keep;
      payload.exclude_invoice_ids[connection.org_id] = exclude;
    }

    console.log( MCat.toggleMsg );
    self.net.post( payload, 'invoices/' + userType + '/' + connection.org_id + '/invoices',
      function ( error ) {
        if ( !error )
          error = MCat.networkError;
        connection.lastAction = MCat.failedToggleMsg;
        console.error( MCat.errorPrefix + ' ' + error );
        toggleCallback( connectionId, error );
      },
      function ( response ) {
        connection.lastAction = MCat.successToggleMsg;
        console.log( instance + ' - ' + MCat.successToggleMsg );
        var payload  = JSON.parse( response.body ).payload;
        connection.lastActive  = new Date( payload.created );
        toggleCallback( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

  // amount:
  //  *  float 
  // amount_meta:
  //  *  greater
  //  *  lesser
  // date_meta:
  //  *  greater
  //  *  lesser
  // date_start:
  //  *  YYYY-MM-DD
  // event_id:
  //  *  integer
  // sortType:
  //  *  _item (amount)
  //  *  supplier_id
  //  *  name (company name)
  //  *  payment_due_date
  //  *  voucher_id
  // supplier_id
  //  *  integer
  self.__marshalQuery = function ( connection, query ) {
    var validCommands = {
    // cmd           internal       regex                 , canBeRange 
      'amount'   : [ 'amount',      /^\d+\.{0,1}\d{1,2}$/ , true  ],
      'due'      : [ 'date_start',  /^\d{4}-\d{2}-\d{2}$/ , true  ],
      'event'    : [ 'event_id',    /^\d+$/               , false ],
      'sortOn'   : [ 'sortType',    /^[a-zA-Z_]+$/        , false ],
      'supplier' : [ 'supplier_id', /^\d+$/               , false ]
    };

    var translateSortValues = {
      amount : '_item',
      supplier : 'supplier_id',
      name     : 'name',
      due      : 'payment_due_date',
      voucher  : 'voucher_id'
    };
    var queryString = '';
    query = query.split( /\s+/ );
  
    var usingEventFilter = false;
    var usingDateFilter = false;
    var seen = {}
    for ( var token in query ) {
      var pattern = /^([amountdevsrOipl_\-]+)([<>=])([A-Za-z0-9_\-\.]+)$/;
      var matches = query[token].trim().match( pattern );
      if ( matches && matches[0] ) {
        var cmd     = matches[1];
        var op      = matches[2];
        var value   = matches[3];
        if ( !validCommands[cmd] || !value.match( validCommands[cmd][1] ) || ( ( op == '>' || op == '<' ) && !validCommands[cmd][2] ) ) {
          console.warn( MCat.invalidTokenMsg + query[token] + MCat.skippingMsg  );
        }
        else {
          if ( seen[cmd] )
            continue;
          seen[cmd] = 1;
          if ( cmd == 'event' ) {
            usingEventFilter = true;
            if ( usingDateFilter ) {
              console.warn( MCat.noEventFilterMsg  );
              queryString = queryString.replace(/event_id=\d+&{0,1}/g, '');
              continue;
            }
          }
          else if ( cmd == 'due' ) {
            usingDateFilter = true;
            if ( usingEventFilter ) {
              console.warn( MCat.noDateFilterMsg  );
              queryString = queryString.replace(/date_start[=<>][\d\-]+&{0,1}/g, '');
              queryString = queryString.replace(/date_meta[=<>](greater|lesser)&{0,1}/g, '');
              continue;
            }
          }
          else if ( cmd == 'sortOn' ) {
            value = translateSortValues[value];
          }
          
          queryString = queryString + encodeURIComponent( validCommands[cmd][0] ) + '=' + encodeURIComponent( value ) + '&';

          if ( op == '>' ) {
            if ( cmd == 'due' )
              queryString = queryString + 'date_meta=' + encodeURIComponent( 'greater' )   + '&'
            else if ( cmd == 'amount' )
              queryString = queryString + 'amount_meta=' + encodeURIComponent( 'greater' ) + '&'
          }
          else if ( op == '<' ) {
            if ( cmd == 'due' )
              queryString = queryString + 'date_meta=' + encodeURIComponent( 'lesser' )    + '&'
            else if ( cmd == 'amount' )
              queryString = queryString + 'amount_meta=' + encodeURIComponent( 'lesser' )  + '&'
          }
        } 
      }
      else {
        console.warn( MCat.invalidTokenMsg + query[token] );
      }
    }

    queryString = queryString.replace( /\&$/,'' );

    var start = self.__paginate( connection );
    return '?count=' + MCat.invoicesPageSize + '&' + 'start=' + start( MCat.invoicesPageSize ) + '&' + queryString;
  };

  self.__placeholder = 0 - MCat.invoicesPageSize;

  self.__paginate = function ( connection ) {
    if ( !connection.invoicePlaceholder && connection.invoicePlaceholder !== 0 ) {
      connection.invoicePlaceholder = self.__placeholder;
    }
    return function ( add ) {
      connection.invoicePlaceholder = connection.invoicePlaceholder + add;
      return connection.invoicePlaceholder;
    };
  };

}
