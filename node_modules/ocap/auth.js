var MCat = require( 'message-catalog/ocap/auth' ).MCat;

exports.Auth = Auth;

function Auth( net, finishHandler ) {

  var self = this;

  self.getDetails = function ( connectionId, connection, callback ) {
    var cId       = connectionId.split( '@' );
    var instance  = cId[1];
    var emulating = cId[2];
    if ( !connection || !( connection.sessionCookie ) ) {
      finishHandler( connectionId );
      return;
    }
    self.net.get( 'auth/manage',
      function ( error ) {
        if ( !error )
          error = MCat.networkError;
        connection.lastAction = MCat.failedSignInMsg;
        console.error( MCat.errorPrefix + ' ' + error );
        finishHandler( connectionId, error );
      },
      function ( response ) {
        connection.lastAction = MCat.userDetailsAction;
        if ( self.isDebugging )
          console.log( MCat.debugPrefix + ' - ' + instance + ' - ' + MCat.userDetailsMsg );
        var payload           = JSON.parse( response.body ).payload;
        connection.lastActive = new Date( payload.created );
        delete payload.created;
        for (p in payload.response) {
          connection[p] = payload.response[p];
        }
        if ( connection.user_type == MCat.SUPPLIER  || connection.user_type == MCat.BUYER ) {
          callback( connectionId, connection );
        }
        else {
          finishHandler( connectionId );
        }
      },
      instance,
      connection.sessionCookie
    );
  };

  self.isDebugging = false;

  self.net = net;

  self.signIn = function ( connectionId, password ) {
  
    var cId      = connectionId.split( '@' );
    var user     = cId[0].trim();
    var instance = cId[1].trim();
    var payload  = {
      user_name: user,
      password : password
    };

    if (cId[2]) {
      payload.euid = cId[2].trim();
    }

    console.log( MCat.connectMsg );

    self.net.post( payload, 'login',
      function ( error ) {
        if ( !error )
          error = MCat.networkError;
        console.error( MCat.errorPrefix + ' ' + error );
        self.signInCallback( connectionId, password, user, instance, null, error );
      },
      function ( response ) {
        self.signInCallback( connectionId, password, user, instance, response );
      },
      instance
    );
  };

}
