var MCat  = require( 'message-catalog/ocap/event.js' ).MCat,
    Util  = require( 'util.js' ).Util;

exports.Event = Event;

function Event( net, finishHandler, emitter, pageSize ) {

  var self = this;

  self.create = function( connectionId, connection, eventDetails ) {
    var cId  = connectionId.split( '@' );
    var instance = cId[1].trim();

    if ( self.isDebugging )
      emitter.emit( 'debug', MCat.create + MCat.e );

    self.net.post( eventDetails, 'events',
      function ( response ) {
        connection.lastAction    = MCat.successOffer;
        if ( self.isDebugging )
          emitter.emit( 'debug', instance + ' - ' + MCat.successCreate );
        var payload              = response && JSON.parse( response.body ).payload;
        connection.lastActive    = ( payload && new Date( payload.created ) ) || new Date();
        finishHandler( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

  self.getAward = function ( connectionId, connection, eventDate ) {

    var cId  = connectionId.split( '@' );
    var instance = cId[1].trim();

    self.net.getReport( 'invoices/event_disposition?event_date=' + eventDate + '&start=0&count=50&sort=event_winner',

      function ( response ) {
        var invoices = JSON.parse( response.body ).payload.response.invoices;
        var displayMsg = "\nvoucher,date,due,amount,discount,event,winner";
        for ( i in invoices ) {
          i = invoices[i];
          displayMsg = displayMsg + i.voucher_id + ',' + i.invoice_date + ',' + i.payment_due_date + ',' + i.amount + ',' + 
            i.discount_amount + ',' + i.event_id + ',' + i.event_winner + "\n";
        }
        finishHandler( connectionId, null, displayMsg );
      },
      instance,
      connection.sessionCookie
    );

  };

  self.getDetails = function ( connectionId, connection, finishOverride ) {

    var cId      = connectionId.split( '@' );
    var instance = cId[1].trim();

    if ( !connection || !( connection.sessionCookie ) ) {
      if ( finishOverride )
        finishOverride( connectionId );
      else
        finishHandler( connectionId );
      return;
    }

    var userType;
    if ( connection.user_type == MCat.BUYER ) {
      userType = 'buyer';
    }
    else if ( connection.user_type = MCat.SUPPLIER ) {
      userType = 'supplier';
    }

    self.net.getObject( 'events/' + userType + '/' + connection.org_id,
      function ( response ) {

        connection.lastAction = MCat.eventsDetailAction;
        if ( self.isDebugging )
          emitter.emit( 'debug', instance   + ' - ' + MCat.eventsDetail );
        var payload           = JSON.parse( response.body ).payload;
        connection.lastActive = new Date( payload.created );
        var events            = payload.response.events;

        // Remove any completed events from this connection
        var eventFound = false;
        for ( ce in connection.events ) {
          for ( e in events ) {
            if ( ce == events[e].event_id )
              eventFound = true;
          }
          if ( !eventFound ) {
            if ( self.isDebugging )
              emitter.emit( 'debug', MCat.deletingEvent + ce );
            delete connection.events[ce];
          }
        }
        for ( e in events ) {
          var theEvent = events[e];
          var eventId  = theEvent.event_id;
          connection.events = connection.events || {};
          connection.events[eventId] = {};
          var event = connection.events[eventId];
          if ( self.isDebugging ) {
            emitter.emit( 'debug', instance + ' - ' + MCat.foundEvent + eventId );
          }
          for ( key in theEvent ) {
            if ( /_time$/.test( key ) )
              event[key] = new Date( theEvent[key] );
            else 
              event[key] = theEvent[key];
          }
  
          var isLive       = event.is_live;
          var isBuyerLive  = event.is_buyer_live;
          var isActive     = event.is_active;
          var startTime    = event.start_time;
          var endTime      = event.end_time;
          var isEncumbered = event.is_encumbered;
          var newCheckDate = Util.iso8601Date( event.new_check_date );
          var payThruDate  = Util.iso8601Date( event.pay_thru_date );
          var startsIn     = Util.timeElapse( ( new Date() ).getTime(), startTime.getTime() );
          var duration     = Util.timeElapse( startTime.getTime(), endTime.getTime() );
          var eventStatus = ''
          if ( isActive && isLive && isBuyerLive ) {
            eventStatus = MCat.liveStatus;
          }
          else if ( isActive && isBuyerLive ) {
            eventStatus = MCat.awaitingStatus;
          }
          else if ( isActive ) {
            eventStatus = MCat.preofferStatus;
          }
          if ( self.isDebugging ) {
            var displayMsg = instance + MCat.s + MCat.countdown + MCat.c + startsIn + 
                             ' ' + MCat.duration  + MCat.c + duration +
                             ' ' + MCat.newCheck  + MCat.c + newCheckDate +
                             ' ' + MCat.payThru   + MCat.c + payThruDate; 
            emitter.emit( 'debug', displayMsg );
          }
        }
        if ( finishOverride )
          finishOverride( connectionId );
        else
          finishHandler( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

  self.getOffers = function ( connectionId, connection, eventId ) {

    var cId  = connectionId.split( '@' );
    var instance = cId[1].trim();

    self.net.getReport( 'pave/event/' + eventId + '/items/csv',
      function ( response ) {
        finishHandler( connectionId, null, response.body );
      },
      instance,
      connection.sessionCookie
    );

  };

  self.getPreOffers = function ( connectionId, connection, eventId ) {

    var cId  = connectionId.split( '@' );
    var instance = cId[1].trim();

    self.net.getReport( 'events/user/' + connection.user_id + '/event/' + eventId + '/pre_bids/csv',
      function ( response ) {
        finishHandler( connectionId, null, response.body );
      },
      instance,
      connection.sessionCookie
    );

  };

  self.isDebugging = false;

  self.lockBasket = function ( connectionId, connection, eventId, supplierId, basketId, statusCode ) {

    var cId  = connectionId.split( '@' );
    var instance = cId[1].trim();

    if ( connection ) { 
      if ( connection.user_type == MCat.BUYER ) {
        var cId       = connectionId.split( '@' );
        var instance  = cId[1].trim();
        var payload = {
          details: [ supplierId, 'basket', basketId, 'status' ],
          supplierId : supplierId,
          status     : statusCode
        }
        self.net.post( payload, 'events/' + eventId + '/' + supplierId + '/basket/' + basketId + '/status',
          function ( response ) {
            connection.lastAction    = MCat.userDetailsAction;
            if ( self.isDebugging )
              emitter.emit( 'debug', instance + ' - ' + MCat.userDetails );
            var payload              = JSON.parse( response.body ).payload;
            connection.lastActive    = new Date( payload.created );
            delete payload.created;
          },
          instance,
          connection.sessionCookie
        );
      }
      else if ( connection.user_type = MCat.SUPPLIER ) {
        emitter.emit( 'failedOCAPservice', instance + ' - ' + MCat.errorSupplierCant );
      }
    }
    else {
      emitter.emit( 'failedOCAPservice', MCat.errorNoConnection );
    }
  };

  self.net = net;

  self.placeOffer = function ( connectionId, connection, basket ) {

    var cId  = connectionId.split( '@' );
    var instance = cId[1].trim();

    var isLive      = connection.events[basket.event].is_live;
    var isBuyerLive = connection.events[basket.event].is_buyer_live;
    var isActive    = connection.events[basket.event].is_active;
    var endpoint, payload;
    if ( !isLive && !isBuyerLive ) {
      payload  = {
        details  : ["user", connection.user_id, "pre_bid"],
        pre_bids : {}
      };
      payload.pre_bids[basket.id] = Math.floor( basket.offer / 100 * 100 ) / 100 ;
      endpoint = 'pre_bid';
    }
    else {
      payload  = {
        details : ["user", connection.user_id, "bid"],
        bids    : {}
      };
      payload.bids[basket.id] = Math.floor( basket.offer / 100 * 100 ) / 100 ;
      endpoint = 'bid';
    }

    if ( self.isDebugging )
      emitter.emit( 'debug', MCat.offer );

    self.net.post( payload, 'events/user/' + connection.user_id + '/' + endpoint,
      function ( response ) {
        connection.lastAction    = MCat.successOffer;
        if ( self.isDebugging )
          emitter.emit( 'debug', instance + ' - ' + MCat.successOffer );
        var payload              = JSON.parse( response.body ).payload;
        connection.lastActive    = new Date( payload.created );
        finishHandler( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

  self.timers = {};

}
