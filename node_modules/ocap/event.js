var MCat  = require( 'message-catalog/ocap/event' ).MCat;

exports.Event = Event;

function Event( net, finishHandler ) {

  var self = this;

  self.__finishHandler = finishHandler;

  self.getDetails = function ( connectionId, connection ) {
    var cId      = connectionId.split( '@' );
    var instance = cId[1];
    if ( !connection || !( connection.sessionCookie ) ) {
      self.__finishHandler( connectionId );
      return;
    }
    var userType;
    if ( connection.user_type == MCat.BUYER ) {
      userType = 'buyer';
    }
    else if ( connection.user_type = MCat.SUPPLIER ) {
      userType = 'supplier';
    }
    self.net.get( 'events/' + userType + '/' + connection.org_id,
      function ( error ) {
        if ( !error )
          error = MCat.networkError;
        connection.lastAction = MCat.failedSignInMsg;
        console.error( MCat.errorPrefix + ' ' + error );
        self.__finishHandler( connectionId, error );
      },
      function ( response ) {
        connection.lastAction = MCat.eventsDetailAction;
        if ( self.isDebugging )
          console.log( MCat.debugPrefix + ' - ' + instance   + ' - ' + MCat.eventsDetailMsg );
        var payload           = JSON.parse( response.body ).payload;
        connection.lastActive = new Date( payload.created );
        var events            = payload.response.events; 
        for ( e in events ) {
          var theEvent = events[e];
          var eventId  = theEvent.event_id;
          connection.events = connection.events || {};
          connection.events[eventId] = {};
          var event = connection.events[eventId];
          if ( self.isDebugging ) {
            console.log( MCat.debugPrefix + ' - ' + instance + ' - ' + MCat.foundEventMsg + eventId );
          }
          for ( key in theEvent ) {
            if ( /_time$/.test( key ) )
              event[key] = new Date( theEvent[key] );
            else 
              event[key] = theEvent[key];
          }
          var isLive       = event.is_live;
          var isBuyerLive  = event.is_buyer_live;
          var isActive     = event.is_active;
          var startTime    = event.start_time;
          var endTime      = event.end_time;
          var isEncumbered = event.is_encumbered;
          var newCheckDate = Util.iso8601Date( event.new_check_date );
          var payThruDate  = Util.iso8601Date( event.pay_thru_date );
          var startsIn     = Util.timeElapse( ( new Date() ).getTime(), startTime.getTime() );
          var duration     = Util.timeElapse( startTime.getTime(), endTime.getTime() );
          var eventStatus = ''
          if ( isActive && isLive && isBuyerLive ) {
            eventStatus = MCat.liveStatus;
          }
          else if ( isActive && isBuyerLive ) {
            eventStatus = MCat.awaitingStatus;
          }
          else if ( isActive ) {
            eventStatus = MCat.preofferStatus;
          }
          if ( self.isDebugging ) {
            console.log( MCat.debugPrefix + ' - ' + instance + ' - #' + eventId + ': ' + MCat.countdownMsg + ': ' + startsIn );
            console.log( MCat.debugPrefix + ' - ' + instance + ' - #' + eventId + ': ' + MCat.durationMsg  + ': ' + duration );
            console.log( MCat.debugPrefix + ' - ' + instance + ' - #' + eventId + ': ' + MCat.newCheckMsg  + ': ' + newCheckDate );
            console.log( MCat.debugPrefix + ' - ' + instance + ' - #' + eventId + ': ' + MCat.payThruMsg   + ': ' + payThruDate );
            console.log( MCat.debugPrefix + ' - ' + instance + ' - #' + eventId + ': ' + MCat.statusPrefix + ': ' + eventStatus );
          }
        }
        self.__finishHandler( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

  self.isDebugging = false;

  self.lockBasket = function ( connectionId, connection, eventId, supplierId, basketId, statusCode ) {

    var lockBasketCallback = function ( connectionId, error ) {
      if ( error ) {
        console.log( MCat.errorFlip + ': ' + connectionId );
        self.__postCommandCallback( connectionId );
        return;
      }
      else {
        console.log( MCat.debugPrefix + ' - ' + MCat.successFlip );
      }
    };

    if ( connection ) { 
      if ( connection.user_type == MCat.BUYER ) {
        var cId       = connectionId.split( '@' );
        var instance  = cId[1];
        var emulating = cId[2];
        var payload = {
          details: [ supplierId, 'basket', basketId, 'status' ],
          supplierId : supplierId,
          status     : statusCode
        }
        self.net.post( payload, 'events/' + eventId + '/' + supplierId + '/basket/' + basketId + '/status',
          function ( error ) {
            if ( !error )
              error = MCat.networkError;
            connection.lastAction = MCat.failedSignInMsg;
            console.error( MCat.errorPrefix + ' ' + error );
            self.__finishHandler( connectionId, error );
          },
          function ( response ) {
            connection.lastAction    = MCat.userDetailsAction;
            console.log( MCat.debugPrefix + ' - ' + instance + ' - ' + MCat.userDetailsMsg );
            var payload              = JSON.parse( response.body ).payload;
            connection.lastActive    = new Date( payload.created );
            delete payload.created;
          },
          instance,
          connection.sessionCookie
        );
      }
      else if ( connection.user_type = MCat.SUPPLIER ) {
        console.log( MCat.errorSupplierCant );
      }
    }
    else {
      console.warn( MCat.errorPrefix + ' - ' + MCat.errorNoConnection );
    }
  };

  self.net = net;

  self.placeOffer = function ( connectionId, connection, basket ) {

    var placeOfferCallback = function ( connectionId, error ) {
      var cId = connectionId.split( '@' );
      if ( error ) {
        console.log( cId[1] + ' - ' + MCat.errorOffer );
        self.__finishHandler( connectionId, error );
        return;
      }
      else {
        console.log( MCat.debugPrefix + ' - ' + cId[1] + ' - ' + MCat.successOffer );
        self.__finishHandler( connectionId );
      }
    };

    var cId         = connectionId.split( '@' );
    var instance    = cId[1].trim();
    var isLive      = connection.events[basket.event].is_live;
    var isBuyerLive = connection.events[basket.event].is_buyer_live;
    var isActive    = connection.events[basket.event].is_active;
    var endpoint, payload;
    if ( !isLive && !isBuyerLive ) {
      payload  = {
        details  : ["user", connection.user_id, "pre_bid"],
        pre_bids : {}
      };
      payload.pre_bids[basket.id] = Math.floor( basket.offer / 100 * 100 ) / 100 ;
      endpoint = 'pre_bid';
    }
    else {
      payload  = {
        details : ["user", connection.user_id, "bid"],
        bids    : {}
      };
      payload.bids[basket.id] = Math.floor( basket.offer / 100 * 100 ) / 100 ;
      endpoint = 'bid';
    }

    console.log( MCat.debugPrefix + ' - ' + MCat.offerMsg );

    self.net.post( payload, 'events/user/' + connection.user_id + '/' + endpoint,
      function ( error ) {
        if ( !error )
          error = MCat.networkError;
        connection.lastAction = MCat.failedOfferMsg;
        console.error( MCat.errorPrefix + ' ' + error );
        placeOfferCallback( connectionId, error );
      },
      function ( response ) {
        connection.lastAction    = MCat.successOfferMsg;
        console.log( MCat.debugPrefix + ' - ' + instance + ' - ' + MCat.successOfferMsg );
        var payload              = JSON.parse( response.body ).payload;
        connection.lastActive    = new Date( payload.created );
        placeOfferCallback( connectionId );
      },
      instance,
      connection.sessionCookie
    );
  };

}
