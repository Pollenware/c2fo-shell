var MCat = require( 'message-catalog/ocap/env.js' ).MCat,
    p      = require( 'third-party/commander.js' ),
    tty    = require( 'tty' );

exports.Env = Env;

function Env( version, authHandler, finishHandler ) {

  var self = this;
  this.authHandler = authHandler;

  p.version( version )
    .option( '-u, --user  <user name>'         , 'user name'         , validString )
    .option( '-i, --instance <instance name>'  , 'instance host name', validString )
    .option( '-e, --emulating <user name>'     , 'user to emulate'   , validString )
    .option( '-d, --debug'                     , 'turn on debug messages'               )
    .parse( process.argv );

  this.hasConnections = function () {
    var totalConnections = Object.keys( self.connections ).length;
    if ( totalConnections === 0 ) {
      console.error( MCat.errorPrefix + ' - ' + MCat.errorNoConnection );
      return false;
    }
    return true;
  };

  this.connections = {};

  this.connectionString = function () {
    var connect = p.user + '@' + p.instance;
    if ( p.emulating ) {
      connect = connect + '@' + p.emulating;
    }
    return connect;        
  };

  this.listConnections = function () {
    var keys = {};
    for( var i in self.connections ) if ( self.connections.hasOwnProperty( i ) ) {
      keys[self.connections[i].id] =  i;
    }
    return keys;
  };

  this.context = p;

  this.promptForEmulatee = function ( connectionId, pwd, listener ) {
    p.prompt( MCat.emulatePrefix, function( e ) {
      p.emulating = e.trim();
      var newConnectionId = connectionId + '@' + p.emulating;
      if ( listener ) {
        tty.setRawMode( true );
        process.stdin.addListener( 'keypress', listener );
      }
      self.authHandler( newConnectionId, pwd );
    });
  };

  this.promptForInstance = function () {
    p.prompt( MCat.instancePrefix, function( i ){
      p.instance = i.trim();
      if ( !p.user ) {
        self.promptForUser();
      }
      else {
        self.promptForPassword( p.user + '@' + p.instance );
      }
    });
  };

  this.promptForPassword = function ( connectionId, listener ) {
    tty.setRawMode( false );
    p.password( MCat.passwordPrefix, '*', function( pwd ) {
      if ( !p.emulating && /^.+_admin$/i.test( p.user ) ) {
        self.promptForEmulatee( connectionId, pwd, listener );
      }
      else {
        if ( listener ) {
          tty.setRawMode( true );
          process.stdin.addListener( 'keypress', listener );
        }
        self.authHandler( connectionId, pwd );
      }
    });
  };

  this.promptForUser = function () {
    p.prompt( 'User: ', function( u ) {
      p.user = u.trim();
      if ( p.emulating && !( /^.+_admin$/i.test( p.user ) ) ) {
        console.error( MCat.nonAdminWarning );
        finishHandler();
      }
      else if ( !p.instance ) {
        self.promptForInstance();
      }
      else {
        self.promptForPassword( p.user + '@' + p.instance );
      }
    });
  };

  var initState = {
    isInvalidEmulator   : ( p.emulating && p.user && !( /^.+_admin$/i.test( p.user ) ) ), 
    isEmulatingInstance : ( p.emulating && p.instance ), 
    isEmulatingUser     : ( p.emulating && p.user ), 
    isEmulatingReady    : ( p.emulating && p.instance && p.user ), 
    hasInstanceAndUser  : ( p.user      && p.instance ),
    hasEmulatingOnly    : ( p.emulating ),
    hasUserOnly         : ( p.user      && 1 ),
    hasInstanceOnly     : ( p.instance && 1 )
  };
  if ( initState.isInvalidEmulator ) {
    finishHandler(null, MCat.nonAdminWarning );
  }
  else if ( initState.isEmulatingReady ) {
    process.stdin.resume();
    this.promptForPassword( p.user + '@' + p.instance + '@' + p.emulating );
  }
  else if ( initState.hasUserOnly || initState.isEmulatingUser ) {
    this.promptForInstance();
  }
  else if ( initState.hasInstanceOnly || initState.isEmulatingInstance || initState.hasEmulatingOnly ) {
    this.promptForUser();
  }
  else {
    finishHandler();
  }
}

function validString ( val ) {
  var result = ( /^[_\-a-zA-Z0-9]+$/.test( val ) ) ? val : false;
  if ( result ) {
    return result;
  }
 else {
    console.error( val, MCat.badValueMsg );
    process.exit();
  }
}
