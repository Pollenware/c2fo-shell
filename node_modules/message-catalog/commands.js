var MCatCommon = require( 'message-catalog/common' ).MCatCommon;

exports.MCat = new MCat();

function MCat () {
  this.alreadyMonitored  = ' is already being monitored';
  this.award               = 'retrieving award data for date: ';
  this.basketNumLabel      = '    Basket #';
  this.basketSuffix        = ' Days';
  this.cashPoolPrompt      = '  Cash pool';
  this.daysSeparator       = '-';
  this.durationPrompt      = '  Duration (in minutes)';
  this.eventCashLabel      = ' cash pool: ';
  this.eventFound          = 'event found';
  this.eventOfferLabel     = ' offer: ';
  this.eventOver           = 'monitor stopped, event over';
  this.eventPreLabel       = ' pre-offer: ';
  this.eventStatuses       = {0 : 'RED', 1 : 'YELLOW', 2 : 'GREEN'};
  this.eventStatusLabel    = ' status: ';
  this.failedBasketType    = 'Please enter "apr"(a) or "discount"(d)';
  this.failedEventNotFound = 'event not found: ';
  this.hurdlePrompt        = '      Hurdle rate';
  this.hurdleTypePrompt    = '      Hurdle type';
  this.incrementPrompt     = '      Offer increment';
  this.invClear            = 'trashing local copies of invoices...';
  // Options for invColumns:
  // "voucher_id","buyer_id","supplier_id","event_id","short_name","name","group_id",
  // "payment_due_date","amount""invoice_date","is_buyer_included","is_supplier_included"
  // "status","invoice_id","has_adjustments","is_supplier_excluded","is_unmatched_adjustment",
  // "is_covering_adjust","is_reserved","is_eligible"
  this.invColumns          = ['supplier_id', 'payment_due_date', 'amount', 'group_id', 'name'];
  this.invPrint            = 'printing invoices... ';
  this.logFile             = 'log/ocap.log';
  this.logClear            = 'log cleared';
  this.logWrite            = 'writing log to';
  this.maxDaysPrompt       = '      Maximum days';
  this.minDaysPrompt       = '      Minimum days (enter "e" for "earliest possible"';
  this.monitorBlive        = 'awaiting buyer decision event #';
  this.monitorLive         = 'live event #';
  this.monitorOff          = 'no longer monitoring event';
  this.monitorOn           = 'monitoring event ';
  this.monitorSched        = 'scheduled event #';
  this.monitorSearch       = 'searching for event ';
  this.newCheckPrompt      = '  New check date (YYYY-MM-DD)';
  this.noBaskets           = 'no baskets found';
  this.payThruPrompt       = '  Pay-thru date (YYYY-MM-DD)';
  this.replAddress         = 'localhost: ';
  this.replPrompt          = 'ocap repl';
  this.replUse             = 'visit via telnet ';
  this.startOfferPrompt    = '      Starting offer';
  this.startTimePrompt     = '  Start time (YYYY-MM-DD HH:MM)';

  for ( a in MCatCommon) { 
    if ( a in this ) { continue; }
    this[a] = MCatCommon[a];
  }

}
