var MCatCommon = require( 'message-catalog/common' ).MCatCommon,
    Util = require( 'util.js' ).Util;

exports.MCat = new MCat();

function MCat () {
  this.agentString       = 'OCAP shell, v';
  this.alreadyMonitored  = ' is already being monitored';
  // Options for awardColumns:
  // "pollenware_invoice_id","voucher_id","supplier_id","event_id","short_name","name",
  // "payment_due_date","amount","invoice_date","event_winner","invoice_id","discount_amount",
  // "new_check_date""
  this.awardColumns      = ['voucher_id', 'invoice_id', 'invoice_date', 'payment_due_date',
                            'amount', 'discount_amount', 'event_winner'];
  this.award             = 'retrieving award data for date: ';
  this.failBuyerBid      = 'buyers cannot bid in their own events';
  this.failConnect       = 'connection could not be established: ';
  this.failAmbiguous     = 'ambiguous instruction, skipping: ';
  this.failLiveEvent     = 'event in progress';
  this.failEventNotFound = 'event not found: ';
  this.failNoBuyer       = 'buyers cannot perform this action';
  this.failNoEvents      = 'no events';
  this.failNoSupplier    = 'suppliers cannot perform this action';
  this.failFailure       = 'failure calling failure callback';
  this.failOCAPresponse  = 'failure calling OCAP callback';
  this.eventCashLabel    = ' cash pool: ';
  this.eventFound        = 'event found';
  this.eventOfferLabel   = ' offer: ';
  this.eventOver         = 'monitor stopped, event over';
  this.eventPreLabel     = ' pre-offer: ';
  this.eventStatuses     = {0 : 'RED', 1 : 'YELLOW', 2 : 'GREEN'};
  this.eventStatusLabel  = ' status: ';
  this.exit              = "leaving OCAP";
  this.functions         = 'ocap/main';
  this.helpBlurb         = "type 'h' for help";
  this.help              = function ( prompt ) { var readme = Util.spitFile( 'help.txt', prompt ); };
  this.invClear          = 'trashing local copies of invoices...';
  // Options for invColumns:
  // "voucher_id","buyer_id","supplier_id","event_id","short_name","name","group_id",
  // "payment_due_date","amount""invoice_date","is_buyer_included","is_supplier_included"
  // "status","invoice_id","has_adjustments","is_supplier_excluded","is_unmatched_adjustment",
  // "is_covering_adjust","is_reserved","is_eligible"
  this.invColumns        = ['supplier_id', 'payment_due_date', 'amount', 'group_id', 'name'];
  this.invPrint          = 'printing invoices... ';
  this.logFile           = 'log/ocap.log';
  this.logClear          = 'log cleared';
  this.logWrite          = 'writing log to';
  this.monitorBlive      = 'awaiting buyer decision event #';
  this.monitorLive       = 'live event #';
  this.monitorOff        = 'no longer monitoring event';
  this.monitorOn         = 'monitoring event ';
  this.monitorSched      = 'scheduled event #';
  this.monitorSearch     = 'searching for event';
  this.noBaskets         = 'no baskets found';
  this.notFound          = "command not found type 'h' for help";
  this.offers            = 'retrieving offers for event #';
  this.preOffers         = 'retrieving pre-offers for event #';
  this.promptPrefix      = 'ocap';
  this.promptPoint       = '> ';
  this.replAddress       = 'localhost: ';
  this.replUse           = 'visit via telnet ';
  this.replPrompt        = 'ocap repl';
  this.sessionGrant      = 'session granted';
  this.successSignin     = 'successful signin';
  this.title             = '(pollenware OCAP)';

  for ( a in MCatCommon) { 
    if ( a in this ) { continue; }
    this[a] = MCatCommon[a];
  }

}
