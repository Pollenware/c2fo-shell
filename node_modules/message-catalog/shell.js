var MCatCommon = require( 'message-catalog/common' ).MCatCommon;

exports.MCat = new MCat();

function MCat () {
  this.agentString       = 'OCAP shell, v';
  this.alreadyMonitored  = ' is already being monitored';
  // Options for awardColumns:
  // "pollenware_invoice_id","voucher_id","supplier_id","event_id","short_name","name",
  // "payment_due_date","amount","invoice_date","event_winner","invoice_id","discount_amount",
  // "new_check_date""
  this.awardColumns      = ['voucher_id', 'invoice_id', 'invoice_date', 'payment_due_date',
                            'amount', 'discount_amount', 'event_winner'];
  this.award             = 'retrieving award data for date: ';
  this.failedBuyerBid      = 'buyers cannot bid in their own events';
  this.failedConnect       = 'connection could not be established: ';
  this.failedAmbiguous     = 'ambiguous instruction, skipping: ';
  this.failedLiveEvent     = 'event in progress';
  this.failedEventNotFound = 'event not found: ';
  this.failedNoBuyer       = 'buyers cannot perform this action';
  this.failedNoEvents      = 'no events';
  this.failedNoSupplier    = 'suppliers cannot perform this action';
  this.failedFailure       = 'failure calling failure callback';
  this.failedOCAPresponse  = 'failure calling OCAP callback';
  this.failedOCAPservice   = 'failure calling OCAP service';
  this.failedShellCommand  = 'failure executing shell command';
  this.eventCashLabel      = ' cash pool: ';
  this.eventFound          = 'event found';
  this.eventOfferLabel     = ' offer: ';
  this.eventOver           = 'monitor stopped, event over';
  this.eventPreLabel       = ' pre-offer: ';
  this.eventStatuses       = {0 : 'RED', 1 : 'YELLOW', 2 : 'GREEN'};
  this.eventStatusLabel    = ' status: ';
  this.functions           = 'ocap/main';
  this.helpBlurb           = "type 'h' for help";
  this.invClear            = 'trashing local copies of invoices...';
  // Options for invColumns:
  // "voucher_id","buyer_id","supplier_id","event_id","short_name","name","group_id",
  // "payment_due_date","amount""invoice_date","is_buyer_included","is_supplier_included"
  // "status","invoice_id","has_adjustments","is_supplier_excluded","is_unmatched_adjustment",
  // "is_covering_adjust","is_reserved","is_eligible"
  this.invColumns          = ['supplier_id', 'payment_due_date', 'amount', 'group_id', 'name'];
  this.invPrint            = 'printing invoices... ';
  this.logFile             = 'log/ocap.log';
  this.logClear            = 'log cleared';
  this.logWrite            = 'writing log to';
  this.monitorBlive        = 'awaiting buyer decision event #';
  this.monitorLive         = 'live event #';
  this.monitorOff          = 'no longer monitoring event';
  this.monitorOn           = 'monitoring event ';
  this.monitorSched        = 'scheduled event #';
  this.monitorSearch       = 'searching for event ';
  this.noBaskets           = 'no baskets found';
  this.notFound            = "command not found type 'h' for help";
  this.offers              = 'retrieving offers for event #';
  this.preOffers           = 'retrieving pre-offers for event #';
  this.promptPrefix        = 'ocap';
  this.promptPoint         = '> ';
  this.replAddress         = 'localhost: ';
  this.replUse             = 'visit via telnet ';
  this.replPrompt          = 'ocap repl';
  this.sessionGrant        = 'session granted';
  this.successSignin       = 'successful signin';
  this.title               = '(pollenware OCAP)';

  for ( a in MCatCommon) { 
    if ( a in this ) { continue; }
    this[a] = MCatCommon[a];
  }

}
