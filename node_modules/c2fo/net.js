var Config  = require( 'config/net.js' ).Config,
    extend  = require( 'third-party/extend.js' ).extend,
    MCat    = require( 'message-catalog/c2fo/net.js' ).MCat,
    request = require( 'third-party/request.js' );

exports.Net = Net;

function Net( userAgent, emitter ) {

  var self = this;

  if ( ! Config.isSecure )
    self.protocol = 'http://';
  else
    self.protocol = 'https://';
 
  self.__get = function ( route, responseCallback, hostname, cookie, onTick ) {

    if ( self.isDebugging )
      emitter.emit( 'debug', hostname + MCat.s + 'GET ' + self.protocol + hostname + Config.hostSuffix + Config.hostServices + route );

    request( 
      {
        'method' : 'get',
        'uri'    : self.protocol + hostname + Config.hostSuffix + Config.hostServices + route,
        'headers': {
          'Referer'    : self.protocol + hostname + Config.hostSuffix,
          'Cookie'     : cookie,
          'User-Agent' : userAgent || ( MCat.agentDefault + ' ' + process.argv[1].split( '/' ).pop()  )
         }
      },

      function ( error, response, body ) {
        if ( !error && response.statusCode == 200 ) {
          process.nextTick( function () { onTick( error, response, body ) } );
        }
        else {
          function onTickFail() {
            try {
              emitter.emit( 'failedC2FOresponse', ( response && ( response.statusCode + MCat.s + error ) ) || error );
            }
            catch( e ) {
              emitter.emit( 'failedC2FOfailed', e );
              return;
            }
          }
          process.nextTick(onTickFail)
        }
      }
    );
  };

  self.getObject = function ( route, responseCallback, hostname, cookie ) {
    var onTick = function ( error, response, body ) {
      try {
        var c2fo;
        c2fo = JSON.parse( body );
        if ( c2fo.payload.response.error ) {
          emitter.emit( 'failedC2FOresponse', c2fo.payload.response.error_msg );
          return;
        }
        else {
          responseCallback( response );
          return;
        }
      }
      catch( e ) {
        emitter.emit( 'failedJSONParse', e );
        return;
      }
    };
    self.__get( route, responseCallback, hostname, cookie, onTick );
  };

  self.getReport = function ( route, responseCallback, hostname, cookie ) {
    var onTick = function ( error, response, body ) {
      try {
        responseCallback( response );
        return;
      }
      catch( e ) {
        emitter.emit( 'failedC2FOresponse', ( response && response.statusCode ) || e );
        return;
      }
    };
    self.__get( route, responseCallback, hostname, cookie, onTick );
  };

  self.isDebugging = false;

  self.post = function ( payload, route, responseCallback, hostname, cookie ) {

    if ( self.isDebugging ) {

      var tempPayload = {};

      extend( true, tempPayload, payload );
      tempPayload.password = MCat.passwordMask;

      emitter.emit( 'debug', hostname + MCat.s + JSON.stringify( tempPayload )  );
      emitter.emit( 'debug', hostname + MCat.s + 'POST ' + self.protocol + hostname + Config.hostSuffix + Config.hostServices + route );

    }

    request(
      {
        'method' : 'post',
        'uri'    : self.protocol + hostname + Config.hostSuffix + Config.hostServices + route,
        'headers': {
          'Content-Type' : 'application/x-www-form-urlencoded',
          'Cookie'       : cookie,
          'Referer'      : self.protocol + hostname + Config.hostSuffix
        },
        'body'   : JSON.stringify( payload )
      },

      function ( error, response, body ) {
        if ( !error && response.statusCode == 200 ) {
          if ( response.body ) {
            var onTick = function () {
              try {
                var c2fo = JSON.parse( body );
                if ( c2fo.payload.response.error ) {
                  emitter.emit( 'failedC2FOresponse', null, c2fo.payload.response.error_msg );
                  return;
                }
                else {
                  responseCallback( response );
                  return;
                }
              }
              catch( e ) {
                emitter.emit( 'failedJSONParse', null, e );
                return;
              }
            }
            process.nextTick( onTick );
          }
          else {
            return;
          }
        }
        else {
          function onTick() {
            try {
              emitter.emit( 'failedC2FOresponse', null, response && response.statusCode );
            }
            catch( e ) {
              emitter.emit( 'failedC2FOfailed', null, e );
              return;
            }
          }
          process.nextTick( onTick )
        }
      }
    );
  };

}
